# Guido van Rossum <guido@python.org>

def step1():
    print(
        "–£—Ç–∫–∞-–º–∞–ª—è—Ä ü¶Ü —Ä–µ—à–∏–ª–∞ –≤—ã–ø–∏—Ç—å –∑–∞–π—Ç–∏ –≤ –±–∞—Ä. "
        "–í–∑—è—Ç—å –µ–π –∑–æ–Ω—Ç–∏–∫? ‚òÇÔ∏è"
    )
    option = ''
    options = {'–¥–∞': True, '–Ω–µ—Ç': False}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if options[option]:
        return step2_umbrella()
    return step2_no_umbrella()

def step2_umbrella():
    print("ü¶Ü –£—Ç–∫–∞ –≤–∑—è–ª–∞ –∑–æ–Ω—Ç –∏ –∏–¥—ë—Ç –ø–æ –≥–æ—Ä–æ–¥—É.")
    city = {
        "–¥–æ–º": ["–ø–∞—Ä–∫"],
        "–ø–∞—Ä–∫": ["–º–æ—Å—Ç", "–¥–æ–º"],
        "–º–æ—Å—Ç": ["–ø–ª–æ—â–∞–¥—å", "–±–∞—Ä"],
        "–ø–ª–æ—â–∞–¥—å": ["–±–∞—Ä", "–ø–∞—Ä–∫"]
    }
    steps = 0
    position = "–¥–æ–º"

    while position != "–±–∞—Ä":
        print(f"–°–µ–π—á–∞—Å —É—Ç–∫–∞ –≤: {position}. –ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏–º—Å—è: {city[position]}?")
        choice = input("–ö—É–¥–∞ –∏–¥—ë–º? ")
        if choice in city[position]:
            position = choice
            steps += 1
        else:
            print("–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –±–æ—Ç–∏–∫")

        if steps > 3:
            print("–ê–•–¢–£–ù–ì!! –ù–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å! –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∑–æ–Ω—Ç, –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –æ—Ç –Ω–µ–≥–æ: (—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª 20)")
            code = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ")
            try:
                if int(code) == factorial(20):
                    print("–ü–æ–±–µ–¥–∞!Ô∏è –£—Ç–∫–∏ —Å–µ–≥–æ–¥–Ω—è –ø—å—é—Ç")
                    return step3_bar()
                else:
                    print("–ö–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã–π... –£—Ç–æ—á–∫–∞ –ø—Ä–æ–º–æ–∫–ª–∞ –∏ –∑–∞–±–æ–ª–µ–ª–∞. –ë–æ–ª—å–Ω—ã–º –≤ –±–∞—Ä –ø—É—Ç—å –∑–∞–∫—Ä—ã—Ç")
                    return
            except:
                print("–≠—Ç–æ –¥–∞–∂–µ –Ω–µ —á–∏—Å–ª–æ. –¢—ã —É–∂–µ –≤ –±–∞—Ä–µ? –ö–≤–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–Ω–∏–∫–æ–≤, –ø—Ä–æ–π–¥–∏ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É")
                return
    print("–£—Ç–æ—á–∫–∞ –¥–æ–±—Ä–∞–ª–∞—Å—å –¥–æ –±–∞—Ä–∞ –≤ —Å—É—Ö–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏")
    return step3_bar()


def step2_no_umbrella():
    print("–£—Ç–∫–∞ –±–µ–∑ –∑–æ–Ω—Ç–∞ –∏–¥—ë—Ç –ø–æ –¥–ª–∏–Ω–Ω–æ–º—É –ø—É—Ç–∏")
    city = {
        "–¥–æ–º": ["–ø–∞—Ä–∫"],
        "–ø–∞—Ä–∫": ["–º–æ—Å—Ç", "–¥–æ–º"],
        "–º–æ—Å—Ç": ["–ø–ª–æ—â–∞–¥—å", "–±–∞—Ä"],
        "–ø–ª–æ—â–∞–¥—å": ["–±–∞—Ä", "–ø–∞—Ä–∫"]
    }
    steps = 0
    position = "–¥–æ–º"

    while position != "–±–∞—Ä":
        print(f"–°–µ–π—á–∞—Å —É—Ç–∫–∞ –≤: {position}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏: {city[position]}")
        choice = input("–ö—É–¥–∞ –∏–¥—ë–º? ")
        if choice in city[position]:
            position = choice
            steps += 1
        else:
            print("–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç, –±–æ—Ç–∏–∫")

        if steps > 3:
            print("–ê–•–¢–£–ù–ì!! –ù–∞—á–∞–ª—Å—è –¥–æ–∂–¥—å! –£—Ç–æ—á–∫–µ –Ω–∞–¥–æ —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—é, —á—Ç–æ–±—ã —É–∫—Ä—ã—Ç—å—Å—è")
            return sewer_challenge()

    print("–£—Ç–æ—á–∫–∞ –¥–æ–±—Ä–∞–ª–∞—Å—å –¥–æ –±–∞—Ä–∞ –±–µ–∑ –∑–æ–Ω—Ç–∞ (–∏ –≤—Å—è –º–æ–∫—Ä–∞—è).")
    return step3_bar()


def sewer_challenge():
    print("–ö–∞–Ω–∞–ª–∏–∑–∞—Ü–∏—è. –ù—É–∂–Ω–æ —Å–ø—É—Å—Ç–∏—Ç—å—Å—è –Ω–∞ 10 –º–µ—Ç—Ä–æ–≤.")
    depth = 0
    while depth < 10:
        try:
            step = int(input("–ù–∞ —Å–∫–æ–ª—å–∫–æ –º–µ—Ç—Ä–æ–≤ —Å–ø—É—Å–∫–∞–µ–º—Å—è? "))
            depth += step
            if depth < 10:
                print("–ú–∞–ª–æ! –°–ø—É—Å–∫–∞–π—Å—è –µ—â—ë")
            elif depth == 10:
                print("–£—Ç–æ—á–∫–∞ —Å–ø—É—Å—Ç–∏–ª–∞—Å—å –∫–∞–∫ –Æ–≤–µ–ª–∏—Ä –∏ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞ —á–µ—Ä–µ–ø–∞—à–µ–∫-–Ω–∏–Ω–¥–∑—è, –µ–µ –ø—Ä–æ–∑–≤–∞–ª–∏ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–º")
                print("–û–Ω–∏ –Ω–∞–ª–∏–ª–∏ –µ–π –≥–ª–∏–Ω—Ç–≤–µ–π–Ω –∏ –ø—Ä–∏–Ω—è–ª–∏ –≤ –∫–æ–º–∞–Ω–¥—É. –ü–æ–±–µ–¥–∞! ")
                return
            else:
                print("–£—Ç–æ—á–∫–∞ –∑–∞—Ö–ª–µ–±–Ω—É–ª–∞—Å—å. –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞")
                return
        except:
            print("–≠—Ç–æ –¥–∞–∂–µ –Ω–µ —á–∏—Å–ª–æ. –¢—ã —É–∂–µ –≤ –±–∞—Ä–µ? –ö–≤–µ—Å—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–Ω–∏–∫–æ–≤, –ø—Ä–æ–π–¥–∏ –µ–≥–æ –≤ —Å–ª–µ–¥—É—é—â—É—é –ø—è—Ç–Ω–∏—Ü—É")
    return


def step3_bar():
    print("–ë–∞—Ä–º–µ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: '–ß—Ç–æ –±—É–¥–µ—Ç–µ –ø–∏—Ç—å? –í–æ–¥–∫–∞ –∏–ª–∏ –ø–∏–≤–æ?'")
    option = ''
    options = {'–≤–æ–¥–∫–∞': "vodka", '–ø–∏–≤–æ': "beer"}
    while option not in options:
        print('–í—ã–±–µ—Ä–∏—Ç–µ: {}/{}'.format(*options))
        option = input()

    if option == '–≤–æ–¥–∫–∞':
        print("–ù–∞ —É—Ç—Ä–æ —É—Ç–æ—á–∫–∞ –æ—á–Ω—É–ª–∞—Å—å –≤ –∫–∞–Ω–∞–≤–µ. –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞ ")
    else:
        print("–£—Ç–æ—á–∫–∞ –≤—ã–±—Ä–∞–ª–∞ –ø–∏–≤–æ. –í–µ—á–µ—Ä –±—ã–ª —Ö–æ—Ä–æ—à, –ø–æ–±–µ–¥–∞")


def factorial(n):
    result = 1
    for i in range(2, n + 1):
        result *= i
    return result


if __name__ == '__main__':
    step1()
